#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : pGlobal
 major_version : 28
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x1126044003289004
 internal_properties : CAAAAAgAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  internal_properties : CAAAAAgAAAAdC5DaGsntqmfkq1J4p6eipmeEO//QiIdypV0FB6KY+wiPKnW2KoJpaKmeXvb1NGpH4KGGthHXu/V4LqeilI4jnJwO5Q==
  type_code : 31
  p_codes :
   -
     code : |1-
      
     type : 720896
  procedures :
   -
     name : PaymentValidation
     internal_properties : CAAAAAgAAADgWkNDj94Fh0g9nnycPEuE55Z860N42o9Jeaw9OtSP+xZnOSgthPYbjmUEmGo8ScIeazQNwoRY6iBJeza7Gnrd39kx7Uw9SPo8vZeaQr49VVMPpT1fQ+7FgWMXLvy7coBum3zv2xinF3U4828ODp33NlxULL7sFxap9gh22duIKX9nib9IDvbRPmi5I1+Vj0w=
     procedure_id : 1235679820737253395
     type_code : 15
     code : |1-
      Procedure PaymentValidation(LOCAL nCustomerID is 8-byte int, LOCAL nIDOrder is 8-byte int)
      
      
      SaaSClient is a SaaSClient
      SaasSubscription is a SaaSSubscription
      AdminUser is a SaaSUser
      cAUser is a SaaSUser
      arrUsers is array of SaaSUser
      
      
      // Load the customer form
      HReadSeekFirst(Customer, CustomerID, nCustomerID)
      IF HFound(Customer) = False THEN
      	Error(<§@1b8bab4900063c190000§>)
      	RESULT False
      END
      
      // Load the order
      HReadSeekFirst(Orders, OrderID, nIDOrder)
      IF HFound(Orders) = False THEN
      	Error(<§@1b8bab4900063c190001§>)
      	RESULT False
      END
      
      // Switch the order to paid
      Orders.bIsPaid = True 
      IF HModify(Orders) = False THEN
      	Error(<§@1b8bab4900063c190002§>)
      	RESULT False
      END
      
      // Finds the SaaS client account corresponding to the client of the IS
      SaaSClient = SaaSAdminFindClient(Customer.Email)
      IF ErrorOccurred THEN
      	
      	// Create the customer account	
      	SaaSClient..Name = Customer.Company
      	SaaSClient..ExternalReference = Customer.Email
      	
      	// Save the customer account
      	IF SaaSAdminAddClient(SaaSClient) = False THEN
      		Orders.bErrorAfterPayment = True
      		Orders.DetailsErrorAfterPayment = StringBuild(<§@1b8bab4900063c190009§>, SaaSClient..Name, ErrorInfo())
      		HModify(Orders)
      		RESULT False
      	END
      	
      	// Defines an administrator user by default
      	AdminUser..AdministratorRights = True
      	AdminUser..Name = Customer.Name
      	AdminUser..FirstName = Customer.FirstName
      	// Uses the same login/password couple by default as the client account
      	AdminUser..Login = Customer.Email
      	AdminUser..Password = Customer.Password
      	// Adds the user to the account
      	IF SaaSAdminAddUser(AdminUser, SaaSClient) = False THEN
      		Orders.bErrorAfterPayment = True
      		Orders.DetailsErrorAfterPayment = StringBuild(<§@1b8bab4900063c190004§>, AdminUser..Login, SaaSClient..Name, ErrorInfo())
      		HModify(Orders)
      		RESULT False
      	END
      	
      ELSE
      	
      	// If the client account exists, finds an administrator with a login corresponding to the email address
      	arrUsers = SaaSAdminListUser(SaaSClient)
      	FOR ALL ELEMENT cAUser of arrUsers
      		IF cAUser..Login ~= Customer.Email _AND_ cAUser..AdministratorRights = True THEN
      			AdminUser = cAUser
      			BREAK
      		END
      	END
      	
      	// If no user corresponds
      	IF AdminUser..Login ~= “” THEN
      		// Create the default user of the site
      		AdminUser..AdministratorRights = True
      		AdminUser..Name = Customer.Name
      		AdminUser..FirstName = Customer.FirstName
      		// Uses the same login/password couple by default as the client account
      		AdminUser..Login = Customer.Email
      		AdminUser..Password = Customer.Password
      		
      		IF SaaSAdminAddUser(AdminUser, SaaSClient) = False THEN
      			Orders.bErrorAfterPayment = True
      			Orders.DetailsErrorAfterPayment = StringBuild(<§@1b8bab4900063c190005§>, AdminUser..Login, SaaSClient..Name, ErrorInfo())
      			HModify(Orders)
      			RESULT False
      		END	
      		
      	END
      
      END
      
      // Creating the subscription
      SaasSubscription..StartDate = Today()
      SaasSubscription..NbLicenses = Orders.NbLicenses
      SaasSubscription..EndDate = Orders.EndDate
      IF SaaSAdminAddSubscription(SaasSubscription, gPricingToOrder, SaaSClient) = False THEN
      	Orders.bErrorAfterPayment = True
      	Orders.DetailsErrorAfterPayment = StringBuild(<§@1b8bab4900063c190006§>, SaaSClient..Name, gPricingToOrder..Name, ErrorInfo())
      	HModify(Orders)
      	RESULT False
      END
      
      // Enables the license for this user
      IF SaaSAdminSubscriptionAllocateLicense(SaasSubscription, AdminUser) = False THEN
      	Orders.bErrorAfterPayment = True
      	Orders.DetailsErrorAfterPayment = StringBuild(<§@1b8bab4900063c190007§>, AdminUser..Login, ErrorInfo())
      	HModify(Orders)
      	RESULT False
      END
      
      
      // The operation is successfully performed by default
      RESULT True
     type : 458752
   -
     name : LockingError
     internal_properties : CAAAAAgAAABwkSo4/11AAXVhDRbnubv6Ss8hzzASU6mnHidt/rCw2RF/565T1PHdO0i7g5ipLeKoC2Og/Y32Sjhztx1hYKut4+P8VDC8vHgu9MwhhD9Dug6eS8XotcZSSAmJfLu+hi/svFp2I7fXIedNxipjRA==
     procedure_id : 1235679820737318931
     type_code : 15
     code : |1-
      // Summary: Displays a locking error message (unavailable SaaS server, no SaaS site, ...)
      // Syntax:
      //LockingError (<sErrorMessage> is string)
      //
      // Parameters:
      //	sErrorMessage (ANSI string): Text of the error
      // Return value:
      // 	None
      //
      Procedure LockingError(sErrorMessage is string)
      
      // Displays the string in red in the browser
      StringDisplay(“<html><font color=red>” + sErrorMessage + “</font></html>”)
      
      // End of program
      EndProgram()
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAACVGQgYbalU7DKC3oH4ItDrjtcTHXXV/EuH8q0IbhyQlw==
  original_name : COL_Collection1
resources :
 string_res :
  identifier : 0x1b8bab4900063c19
  internal_properties : CAAAAAgAAACm76HWfKGWp33VjXInA4cRlqArlgTTA862QGt72W2ld5Y=
  strings :
   -
     text :
      en-GB : Unable to find the customer account
     index : 0
   -
     text :
      en-GB : Unable to find the order
     index : 1
   -
     text :
      en-GB : Unable to update the order
     index : 2
   -
     text :
      en-GB : Unable to create the customer account
     index : 3
   -
     text :
      en-GB : "Unable to create the default user \"%1\" of the SaaS client account \"%2\".\r\n\r\n%3"
     index : 4
   -
     text :
      en-GB : "Unable to create the default user \"%1\" of the SaaS client account \"%2\".\r\n\r\n%3"
     index : 5
   -
     text :
      en-GB : "Unable to create the subscription of the \"%1\" client account to the \"%2\" pricing.\r\n\r\n%3"
     index : 6
   -
     text :
      en-GB : "Unable to activate the license for the \"%1\" user.\r\n\r\n%2"
     index : 7
   -
     text :
      en-GB : Unable to connect to the SaaS server "%1".
     index : 8
   -
     text :
      en-GB : "Unable to create the SaaS client account \"%1\".\r\n\r\n%2"
     index : 9
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
